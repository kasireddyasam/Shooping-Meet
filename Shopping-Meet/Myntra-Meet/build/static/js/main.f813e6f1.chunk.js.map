{"version":3,"sources":["components/MeetingFooter/MeetingFooter.component.js","components/card/Card.component.js","components/Participants/Participant/Participant.component.js","components/Participants/Participants.component.js","store/actiontypes.js","store/actioncreator.js","components/MainScreen/MainScreen.component.js","server/firebase.js","App.js","reportWebVitals.js","server/peerConnection.js","store/reducer.js","index.js"],"names":["MeetingFooter","props","_useState","useState","mic","video","screen","_useState2","_slicedToArray","streamState","setStreamState","setScreenState","isEnabled","currentState","_objectSpread","useEffect","onMicClick","onVideoClick","_jsxs","className","children","_jsx","onClick","FontAwesomeIcon","icon","faMicrophone","faMicrophoneSlash","title","faVideo","faVideoSlash","onScreenClick","disabled","faDesktop","ReactTooltip","Card","Participant","curentIndex","currentParticipant","hideVideo","videoRef","showAvatar","currentUser","concat","ref","id","autoPlay","playsInline","audio","style","background","avatarColor","name","_Fragment","connect","state","participants","stream","mainStream","useRef","participantKey","Object","keys","current","srcObject","muted","values","gridCol","length","gridColSize","gridRowSize","Math","ceil","screenPresenter","find","element","map","index","pc","peerConnection","remoteStream","MediaStream","ontrack","event","streams","getTracks","forEach","track","addTrack","videElement","document","getElementById","SET_MAIN_STREAM","ADD_PARTICIPANT","REMOVE_PARTICIPANT","SET_USER","UPDATE_USER","UPDATE_PARTICIPANT","setMainStream","type","payload","dispatch","updateUser","user","participantRef","updateStream","key","sender","getSenders","s","kind","replaceTrack","getVideoTracks","onScreenShareEnd","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","localStream","wrap","_context","prev","next","navigator","mediaDevices","getUserMedia","sent","enabled","getAudioTracks","stop","apply","arguments","_ref2","_callee2","mediaStream","_context2","getDisplayMedia","mediaSource","onended","Participants","micEnabled","videoEnabled","class","firebase","initializeApp","databaseURL","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","db","firepadRef","storage","database","username","requiredPrompt","prompt","replace","userName","roomId","URLSearchParams","window","location","search","get","child","push","history","replaceState","addParticipant","newUser","setUser","removeParticipant","userId","updateParticipant","getUserStream","abrupt","connectedRef","on","snap","val","defaultPreference","userStatusRef","preferences","_defineProperty","onDisconnect","remove","isUserSet","isStreamSet","preferenceSnap","_snap$val","_snap$val$preferences","MainScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createOffer","receiverId","createdID","currentParticipantRef","offerDescription","offer","onicecandidate","candidate","toJSON","setLocalDescription","sdp","set","_x","_x2","_x3","initializeListensers","_callee3","currentUserRef","_context3","_ref3","snapshot","data","store","getState","setRemoteDescription","RTCSessionDescription","createAnswer","_x5","addIceCandidate","RTCIceCandidate","answer","answerDescription","_x4","_ref4","_callee4","otherUserId","participantRef1","_context4","_x6","_x7","defaultUserState","servers","iceServers","urls","iceCandidatePoolSize","generateColor","floor","random","toString","addConnection","RTCPeerConnection","newUserId","currentUserId","offerIds","sort","a","b","localeCompare","createStore","undefined","action","preference","setTimeout","update","updatePreference","ReactDOM","render","React","StrictMode","Provider","App"],"mappings":"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","file":"static/js/main.f813e6f1.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faMicrophone,\r\n  faVideo,\r\n  faDesktop,\r\n  faVideoSlash,\r\n  faMicrophoneSlash,\r\n  faEnvelope,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport \"./MeetingFooter.css\";\r\nconst MeetingFooter = (props) => {\r\n  // streamState is initialized as an object with three properties: 'mic', 'video', and 'screen', each of which is assigned an initial boolean value.\r\n  const [streamState, setStreamState] = useState({\r\n    mic: true,\r\n    video: false,\r\n    screen: false,\r\n  });\r\n  //  When 'micClick' is called, it toggles the microphone state in the streamState object, ensuring that the microphone can be turned on and off within the React component by calling this function. The setStreamState function ensures that the component re-renders with the updated state, reflecting any changes in the UI.\r\n  const micClick = () => {\r\n    setStreamState((currentState) => {\r\n      return {\r\n        // the spread operator ({ ...currentState }) is used to create a shallow copy of the current state object. The spread operator is used to create a new object with the same properties as the currentState object. This is done to ensure that we don't directly mutate the state object, which is a best practice in React.\r\n        ...currentState,\r\n        mic: !currentState.mic,\r\n      };\r\n    });\r\n  };\r\n\r\n  // Similarly for 'onVideoClick'\r\n  const onVideoClick = () => {\r\n    setStreamState((currentState) => {\r\n      return {\r\n        ...currentState,\r\n        video: !currentState.video,\r\n      };\r\n    });\r\n  };\r\n\r\n  // Related to enabling or disabling screen sharing\r\n  const onScreenClick = () => {\r\n    props.onScreenClick(setScreenState);\r\n  };\r\n  // 'setScreenState', it uses the 'setStreamState' function, which is a React state updater function (from useState). It updates the state by creating a new object using the spread syntax (...currentState) to copy(Shallow) the existing state and then overrides the screen property with the value of isEnabled.\r\n  const setScreenState = (isEnabled) => {\r\n    setStreamState((currentState) => {\r\n      return {\r\n        ...currentState,\r\n        screen: isEnabled,\r\n      };\r\n    });\r\n  };\r\n\r\n  // monitoring changes in the 'streamState.mic' value, as indicated by the dependency array [streamState.mic]. When the 'streamState.mic' value changes (i.e., when the microphone state is toggled), this effect is triggered. It then calls 'props.onMicClick'.(streamState.mic)\r\n  useEffect(() => {\r\n    props.onMicClick(streamState.mic);\r\n  }, [streamState.mic]);\r\n\r\n  //  monitoring changes in the 'streamState.video' value, indicated by the [streamState.video] dependency array. When the 'streamState.video' value changes (i.e., when the video state is toggled), this effect is triggered. It then calls         'props.onVideoClick(streamState.video)'.\r\n  useEffect(() => {\r\n    props.onVideoClick(streamState.video);\r\n  }, [streamState.video]);\r\n\r\n  \r\n  return (\r\n    <div className=\"meeting-footer\">\r\n      <div\r\n        className={\"meeting-icons \" + (!streamState.mic ? \"active\" : \"\")}\r\n        data-tip={streamState.mic ? \"Mute Audio\" : \"Unmute Audio\"}\r\n        onClick={micClick}\r\n      >\r\n        <FontAwesomeIcon\r\n          icon={!streamState.mic ? faMicrophoneSlash : faMicrophone}\r\n          title=\"Mute\"\r\n        />\r\n      </div>\r\n      <div\r\n        className={\"meeting-icons \" + (!streamState.video ? \"active\" : \"\")}\r\n        data-tip={streamState.video ? \"Hide Video\" : \"Show Video\"}\r\n        onClick={onVideoClick}\r\n      >\r\n        <FontAwesomeIcon icon={!streamState.video ? faVideoSlash : faVideo} />\r\n      </div>\r\n      <div\r\n        className=\"meeting-icons\"\r\n        data-tip=\"Share Screen\"\r\n        onClick={onScreenClick}\r\n        disabled={streamState.screen}\r\n      >\r\n        <FontAwesomeIcon icon={faDesktop} />\r\n      </div>\r\n      <ReactTooltip />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeetingFooter;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return <div className=\"card\">{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../../card/Card.component\";\r\nimport { faMicrophoneSlash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"./Participant.css\";\r\n\r\nexport const Participant = (props) => {\r\n\r\n  const {\r\n    curentIndex,\r\n    currentParticipant,\r\n    hideVideo,\r\n    videoRef,\r\n    showAvatar,\r\n    currentUser,\r\n  } = props;\r\n  // If there is no currentParticipant (possibly when a participant leaves the meeting), the component returns an empty fragment (<></>), effectively rendering nothing.\r\n  if (!currentParticipant) return <></>;\r\n  return (\r\n    <div className={`participant ${hideVideo ? \"hide\" : \"\"}`}>\r\n      <Card>\r\n        <video\r\n        //The 'ref' attribute in React is used to create a reference to a DOM (Document Object Model) element, such as an HTML element like a video element in this case.\r\n          ref={videoRef}  //'ref={videoRef}': reference to the <video> element using the 'videoRef' prop passed to the Participant component. This allows you to access and manipulate the properties and methods of this specific video element elsewhere in your code.\r\n          className=\"video\"\r\n          id={`participantVideo${curentIndex}`} // Set the unique HTML id attribute of the video element\r\n          autoPlay\r\n          playsInline\r\n        ></video>\r\n\r\n        {/* Display a muted microphone icon if 'currentParticipant.audio' is false */}\r\n        {!currentParticipant.audio && (\r\n          <FontAwesomeIcon\r\n            className=\"muted\"\r\n            icon={faMicrophoneSlash}\r\n            title=\"Muted\"\r\n          />\r\n        )}\r\n        {showAvatar && (\r\n          <div\r\n            style={{ background: currentParticipant.avatarColor }} //Set the background color based on participant's avatarColor which is generated in store>reducer.js\r\n            className=\"avatar\"\r\n          >\r\n            {currentParticipant.name[0]} \r\n            {/* // Display the first character of the participant's name as the avatar. */}\r\n          </div>\r\n        )}\r\n        <div className=\"name\">         \r\n        {/* // Display the participant's name */}\r\n          {currentParticipant.name}\r\n          {currentUser ? \"(You)\" : \"\"} \r\n          {/* // If currentUser is true, display \"(You)\" next to the name */}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./Participants.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { Participant } from \"./Participant/Participant.component\";\r\n\r\nconst Participants = (props) => {\r\n  // Create a reference for the video element\r\n  const videoRef = useRef(null);\r\n  // Get an array of participant keys from the Redux store\r\n  let participantKey = Object.keys(props.participants);\r\n  // To update the video element when currentUser or stream changes\r\n  useEffect(() => {\r\n    if (videoRef.current) {\r\n      videoRef.current.srcObject = props.stream;\r\n      videoRef.current.muted = true;\r\n    }\r\n  }, [props.currentUser, props.stream]);\r\n  // Extract the currentUser object from props\r\n  const currentUser = props.currentUser\r\n    ? Object.values(props.currentUser)[0]\r\n    : null;\r\n  // Determine the grid layout based on the number of participants\r\n  let gridCol =\r\n    participantKey.length === 1 ? 1 : participantKey.length <= 4 ? 2 : 4;\r\n  const gridColSize = participantKey.length <= 4 ? 1 : 2;\r\n  let gridRowSize =\r\n    participantKey.length <= 4\r\n      ? participantKey.length\r\n      : Math.ceil(participantKey.length / 2);\r\n\r\n  // Check if there's a participant presenting their screen\r\n  const screenPresenter = participantKey.find((element) => {\r\n    const currentParticipant = props.participants[element];\r\n    return currentParticipant.screen;\r\n  });\r\n\r\n  // Adjust grid layout if there's a screen presenter\r\n  if (screenPresenter) {\r\n    gridCol = 1;\r\n    gridRowSize = 2;\r\n  }\r\n\r\n  // Map participant data to Participant components\r\n  // Maps through each participant in participantKey and creates a Participant component for each one. It also checks if the participant is the current user and returns null in that case to skip rendering their own video.\r\n  // 'element' represents the current element (or value) in the array participantKey \r\n  // 'index' represents the index of the current element within the participantKey array as the map function iterates through it. It starts at 0 for the first element, 1 for the second element, and so on.\r\n  // It creates an array of participants by mapping over the participantKey array. For each element in participantKey, it generates a <Participant /> component with specific props.\r\n  const participants = participantKey.map((element, index) => {\r\n    const currentParticipant = props.participants[element];\r\n    const isCurrentUser = currentParticipant.currentUser;\r\n    if (isCurrentUser) {\r\n      return null;\r\n    }\r\n    // Create a new MediaStream for each remote participant\r\n    // For each remote participant, this code sets up a peerConnection object (pc) and creates a new MediaStream called remoteStream.\r\n    // The 'peerConnection' object is essential in WebRTC-based applications like video conferencing. It handles the communication and exchange of media streams (video, audio) between participants. In this case, it's used to receive and display the video and audio from the remote participant.\r\n    const pc = currentParticipant.peerConnection;\r\n    // 'remoteStream' will hold the remote participant's audio and video.\r\n    const remoteStream = new MediaStream();  \r\n    // 'curentIndex' to keep track of the index of the current participant.\r\n    let curentIndex = index;\r\n\r\n\r\n    // Add remote tracks to the remoteStream\r\n    // It registers an ontrack event handler for the peer connection. When remote tracks (audio or video) are received, they are added to the remoteStream.\r\n    // It then updates the video element (with the ID \"participantVideoX\") to display the remote stream.\r\n\r\n    // checking if there's a peerConnection object (pc) for the current remote participant.\r\n    // \"current remote participant\" refers to the participant currently being processed in the loop that iterates over the list of participants. The loop goes through each participant in the participantKey array, and currentParticipant represents the details and state of the participant being processed during each iteration.\r\n    if (pc) {\r\n      // set up an ontrack event handler for the peerConnection. This event handler is triggered when the remote participant's audio or video tracks are received.\r\n      /* \r\n      When tracks arrive, the code does the following:\r\n      It iterates through each track received (audio or video).\r\n      For each track, it adds the track to the remoteStream, so the stream now contains both audio and video tracks from the remote participant. */\r\n      pc.ontrack = (event) => {\r\n        event.streams[0].getTracks().forEach((track) => {\r\n          remoteStream.addTrack(track);\r\n        });\r\n        // Update the video element with the remote stream\r\n        // Retrieves the HTML video element associated with the current remote participant, using the currentIndex.\r\n        const videElement = document.getElementById(\r\n          `participantVideo${curentIndex}`\r\n        );\r\n        // If the 'videElement' exists, it sets the 'srcObject' property of the video element to the 'remoteStream'. In simpler terms, it tells the video element to display the video content provided by the 'remoteStream'(contains the video and audio tracks received from a remote participant).\r\n        if (videElement) videElement.srcObject = remoteStream;\r\n      };\r\n    }\r\n\r\n\r\n    // Render the Participant component with specific prop\r\n    return (\r\n      <Participant\r\n        key={curentIndex}\r\n        currentParticipant={currentParticipant}\r\n        curentIndex={curentIndex}\r\n        hideVideo={screenPresenter && screenPresenter !== element}\r\n        showAvatar={\r\n          !currentParticipant.video &&\r\n          !currentParticipant.screen &&\r\n          currentParticipant.name\r\n        }\r\n      />\r\n    );\r\n  });\r\n\r\n\r\n  // Render the container for all Participant components\r\n  return (\r\n    <div\r\n      style={{\r\n        \"--grid-size\": gridCol,\r\n        \"--grid-col-size\": gridColSize,\r\n        \"--grid-row-size\": gridRowSize,\r\n      }}\r\n      className={`participants`}\r\n    >\r\n      {participants}\r\n      <Participant\r\n        currentParticipant={currentUser}\r\n        curentIndex={participantKey.length}\r\n        hideVideo={screenPresenter && !currentUser.screen}\r\n        videoRef={videoRef}\r\n        showAvatar={currentUser && !currentUser.video && !currentUser.screen}\r\n        currentUser={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// 'mapStateToProps' function is used in a React-Redux application to map the state from the Redux store to props that can be used within a component.\r\n// 'state' is the parameter representing the current state of the Redux store.\r\n// mapStateToProps function allows the connected component to access specific pieces of data (participants, currentUser, and stream) from the Redux store's state by mapping them to corresponding props. These props can then be used within the component to access and display this data as needed.\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // Ihe 'participants' property from the Redux state available as a prop named 'participants' in your component. So, your component can access this data as this.props.participants.\r\n    participants: state.participants,\r\n    currentUser: state.currentUser,\r\n    stream: state.mainStream,\r\n  };\r\n};\r\n\r\n// 'export default connect(mapStateToProps)(Participants);' is using the connect function provided by the react-redux library to connect a React component, in this case, Participants, to the Redux store.\r\nexport default connect(mapStateToProps)(Participants);\r\n// Basically it connects your 'Participants' component to a magical storage (Redux store) where your app keeps important data. It also provides a way for 'Participants' to send requests fetch(no change as we have no dispact) that data.\r\n","// action types are typically used in Redux to specify the type of action that should be performed when you dispatch an action.\r\n// These action types are used in your Redux actions to specify the type of action you want to perform. When you dispatch an action with one of these types, your Redux reducers will respond to these actions and update the state in your Redux store accordingly.\r\nexport const SET_MAIN_STREAM = \"SET_MAIN_STREAM\";\r\nexport const ADD_PARTICIPANT = \"ADD_PARTICIPANT\";\r\nexport const REMOVE_PARTICIPANT = \"REMOVE_PARTICIPANT\";\r\nexport const SET_USER = \"SET_USER\";\r\nexport const UPDATE_USER = \"UPDATE_USER\";\r\nexport const UPDATE_PARTICIPANT = \"UPDATE_PARTICIPANT\";\r\nexport const SET_MESSAGES = \"SET_MESSAGES\"","import {\r\n  SET_MAIN_STREAM,\r\n  ADD_PARTICIPANT,\r\n  SET_USER,\r\n  REMOVE_PARTICIPANT,\r\n  UPDATE_USER,\r\n  UPDATE_PARTICIPANT,\r\n  SET_MESSAGES,\r\n} from \"./actiontypes\";\r\n\r\n// export const setMainStream = (stream) => { ... }: This line exports a function called 'setMainStream'. It's a named export, which means you can import and use this function in other parts of your code.\r\nexport const setMainStream = (stream) => {\r\n  return {\r\n    // action object\r\n    // 'type: SET_MAIN_STREAM': This specifies the type of action you are performing. In this case, it's set to 'SET_MAIN_STREAM', which corresponds to the action type you defined earlier in your 'actionTypes.js' file.\r\n    type: SET_MAIN_STREAM,\r\n    //  The payload property of the action object typically contains data associated with the action. Here, you're passing the 'stream' as the 'mainStream' property within the payload. This allows you to update the main video stream in your Redux store with the provided 'stream'.\r\n    payload: {\r\n      mainStream: stream,\r\n    },\r\n  };\r\n};\r\n\r\nexport const setUser = (user) => {\r\n  return {\r\n    type: SET_USER,\r\n    payload: {\r\n      currentUser: user,\r\n    },\r\n  };\r\n};\r\n\r\nexport const addParticipant = (user) => {\r\n  return {\r\n    type: ADD_PARTICIPANT,\r\n    payload: {\r\n      newUser: user,\r\n    },\r\n  };\r\n};\r\n\r\nexport const updateUser = (user) => {\r\n  return {\r\n    type: UPDATE_USER,\r\n    payload: {\r\n      currentUser: user,\r\n    },\r\n  };\r\n};\r\n\r\nexport const updateParticipant = (user) => {\r\n  return {\r\n    type: UPDATE_PARTICIPANT,\r\n    payload: {\r\n      newUser: user,\r\n    },\r\n  };\r\n};\r\n\r\nexport const removeParticipant = (userId) => {\r\n  return {\r\n    type: REMOVE_PARTICIPANT,\r\n    payload: {\r\n      id: userId,\r\n    },\r\n  };\r\n};\r\n\r\nexport const setMessages = (messages) => {\r\n  return {\r\n    type: SET_MESSAGES,\r\n    payload:{\r\n      message:messages,\r\n    }\r\n  };\r\n};\r\n\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport MeetingFooter from \"../MeetingFooter/MeetingFooter.component\";\r\nimport Participants from \"../Participants/Participants.component\";\r\nimport \"./MainScreen.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setMainStream, updateUser } from \"../../store/actioncreator\";\r\n\r\n//  Functional component named 'MainScreen' that takes props as its parameter.\r\nconst MainScreen = (props) => {\r\n  // Creates a ref called participantRef initialized with the props.participants value. This ref will be used to store a reference to the participants.\r\n  const participantRef = useRef(props.participants);\r\n\r\n  // 'onMicClick' function that toggles the microphone's audio on or off based on the micEnabled parameter.\r\n  const onMicClick = (micEnabled) => {\r\n    // props.stream is an object containing the user's audio and video stream for a video call.\r\n    if (props.stream) {\r\n      // Accessing the first element ([0]) of the audio tracks is a common practice when dealing with audio and video tracks in WebRTC, because we just targeting the audio stream coming from the user's microphone, not any other audio sources like the screen, etc.\r\n      props.stream.getAudioTracks()[0].enabled = micEnabled;\r\n      props.updateUser({ audio: micEnabled });\r\n    }\r\n  };\r\n  //  'onVideoClick' function that toggles the user's video on or off based on the videoEnabled parameter.\r\n  const onVideoClick = (videoEnabled) => {\r\n    if (props.stream) {\r\n      // We access the first element [0] of this array because typically, in a video call scenario, there is only one video track, representing the user's camera feed. By accessing the first element, we are effectively targeting the user's camera feed.\r\n      props.stream.getVideoTracks()[0].enabled = videoEnabled;\r\n      props.updateUser({ video: videoEnabled });\r\n    }\r\n  };\r\n// 'useEffect' hook to update the participantRef.current whenever the props.participants change.\r\n  useEffect(() => {\r\n    participantRef.current = props.participants;\r\n  }, [props.participants]);\r\n\r\n  const updateStream = (stream) => {\r\n    // Loop through each participant in `participantRef.current`\r\n    for (let key in participantRef.current) {\r\n    // Get the sender object for the current participant\r\n      const sender = participantRef.current[key];\r\n    // Check if the current participant is the currentUser, and if so, skip to the next participant\r\n      if (sender.currentUser) continue;\r\n    // Get the peerConnection object for the current participant and find the sender associated with video tracks\r\n      const peerConnection = sender.peerConnection\r\n        .getSenders()\r\n        .find((s) => (s.track ? s.track.kind === \"video\" : false));\r\n      //finds the sender that is associated with video tracks It then replaces the video track in the sender with the video track from the stream parameter. This effectively updates the video being sent by that participant with the latest video track from the 'stream'. Camera will be in on-status but when the user toggles the camera to on then only we send the video stream.\r\n\r\n      // ******** SCOPE OF IMPROVEMENT == Only on camera when user toggels camera to on ******* //\r\n      peerConnection.replaceTrack(stream.getVideoTracks()[0]);\r\n    }\r\n    // Set the main video stream to the `stream` parameter\r\n    props.setMainStream(stream);\r\n  };\r\n  //Handle ending a screen sharing session.\r\n  /*It stops the user's screen sharing video stream and restores their camera video stream based on the value in props.currentUser.\r\nIt then updates the video stream that is being sent to other participants (likely using the updateStream function).\r\nFinally, it updates the user's status to indicate that screen sharing is no longer active.*/\r\n  const onScreenShareEnd = async () => {\r\n    // 'navigator.mediaDevices.getUserMedia' method to request access to the user's media devices, specifically audio and video.\r\n    // 'localStream' that represents the user's audio and video stream, which will be used when screen sharing ends.\r\n    const localStream = await navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n      video: true,\r\n    });\r\n\r\n    localStream.getVideoTracks()[0].enabled = Object.values(\r\n      props.currentUser\r\n    )[0].video;\r\n    localStream.getAudioTracks()[0].enabled = Object.values(\r\n      props.currentUser\r\n    )[0].audio;\r\n    updateStream(localStream);\r\n    // to update the user's status,indicating that the screen sharing session has ended.\r\n    props.updateUser({ screen: false });\r\n  };\r\n  // Start a screen sharing session\r\n  /* It checks for compatibility with different screen sharing methods.\r\n    It obtains the user's screen sharing media stream.\r\n    It sets an event handler to detect when the screen sharing session ends.\r\n    It updates the video stream that is being sent to others or updates the user's own video feed.\r\n    It updates the user's status to indicate that they are screen sharing. */\r\n  const onScreenClick = async () => {\r\n    // 'mediaStream'  will store the user's screen sharing media stream.\r\n    let mediaStream;\r\n    // ***Screen Sharing Method Selection***\r\n    //The code checks for different methods of obtaining a screen sharing stream, depending on the browser's compatibility.\r\n    // Which ever method is available that is used for sharing screen.\r\n    // Depending on the method available, the code awaits the user's permission to access the screen sharing media stream.\r\n    if (navigator.getDisplayMedia) {\r\n      mediaStream = await navigator.getDisplayMedia({ video: true });\r\n    } else if (navigator.mediaDevices.getDisplayMedia) {\r\n      mediaStream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: true,\r\n      });\r\n    } else {\r\n      mediaStream = await navigator.mediaDevices.getUserMedia({\r\n        video: { mediaSource: \"screen\" },\r\n      });\r\n    }\r\n    //  Set an event handler for the 'onended' event of the first video track in the mediaStream. This event handler is set to a function called 'onScreenShareEnd'. It's used to detect when the screen sharing session ends.\r\n    mediaStream.getVideoTracks()[0].onended = onScreenShareEnd;\r\n    //  Updates the video stream that is being sent to other participants or updates the user's own video feed with the screen sharing stream.\r\n    updateStream(mediaStream);\r\n    //  Used to update the user's status to indicate that they are currently screen sharing.\r\n    props.updateUser({ screen: true });\r\n  };\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"mainScreen\">\r\n        <Participants />\r\n      </div>\r\n\r\n      <div className=\"footer\">\r\n        <MeetingFooter\r\n          onScreenClick={onScreenClick}\r\n          onMicClick={onMicClick}\r\n          onVideoClick={onVideoClick}\r\n        />\r\n      </div>\r\n      <div class=\"main__right\">\r\n      <div class=\"main__chat_window\">\r\n          <div class=\"messages\">\r\n\r\n          </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n// This function is used to map specific parts of the Redux state to the props of a React component i.e 'mapStateToProps' is used when connecting a React component to the Redux store and you're specifying which parts of the store's state should be accessible to your component as props. This makes it easy for your component to access and display the data it needs from the Redux store.\r\n// 'state' represents the Redux state object.\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // Ihe mainStream property from the Redux state available as a prop named stream in your component. So, your component can access this data as this.props.stream.\r\n    stream: state.mainStream,\r\n    participants: state.participants,\r\n    currentUser: state.currentUser,\r\n  };\r\n};\r\n// This allows the connected component to access the 'mainStream','participants','currentUser' property from the Redux store.\r\n\r\n\r\n// The 'mapDispatchToProps' function is used in a Redux-connected component to specify what actions should be available as props in that component.\r\n// 'dispatch'  parameter is a function provided by Redux that allows you to dispatch actions to update the state in the Redux store.\r\n// The function's return value is an object that you define. Each property in this object corresponds to a prop that you want to make available to your React component, and the property's value is a function that dispatches a specific action.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // Creates a prop named 'setMainStream' in your component. When you call 'this.props.setMainStream(stream)' in your component, it dispatches the setMainStream action with the stream argument. This action typically updates the mainStream property in the Redux store.\r\n    setMainStream: (stream) => dispatch(setMainStream(stream)),\r\n    // When you call this.props.updateUser(user) in your component, it dispatches the updateUser action with the user argument. This action is used to update the user-related data in the Redux store.\r\n    updateUser: (user) => dispatch(updateUser(user)),\r\n  };\r\n};\r\n// mapDispatchToProps, you're allowing your React component to dispatch specific actions that can update the Redux store. This is crucial for managing and maintaining the application's state in a centralized manner.\r\n\r\n\r\n\r\n// connecting 'MainScreen' React component to a Redux store, allowing it to access data from the store's state and dispatch actions to update that state.\r\n// 'connect(mapStateToProps, mapDispatchToProps)' is a function provided by the react-redux library that connects your React component to the Redux store. It takes two functions as arguments: 'mapStateToProps' specifies which data from the store's state should be available as props in MainScreen and 'mapDispatchToProps' specifies which actions can be triggered from MainScreen to update the store.\r\n// Then pass your 'MainScreen' component as an argument to connect. By this we \"wrap\" your component with Redux functionality\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen);\r\n\r\n// Basically it connects your MainScreen component to a magical storage (Redux store) where your app keeps important data. It also provides a way for MainScreen to send requests to change or fetch that data.\r\n\r\n// 'mapStateToProps' is primarily for reading data from the store, and if you want to dispatch actions to change the store, you would need to use 'mapDispatchToProps'.","import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\n// object contains configuration settings for connecting to Firebase\r\n// {more details below}\r\nvar firebaseConfig = {\r\n  databaseURL:\"https://myntra-meet-default-rtdb.firebaseio.com/\", // Add databaseURL,\r\n  apiKey: \"AIzaSyCG2MzwPgvcgy5qkGKLy4k-7nXrUtHnd2E\",\r\n  authDomain: \"myntra-meet.firebaseapp.com\",\r\n  projectId: \"myntra-meet\",\r\n  storageBucket: \"myntra-meet.appspot.com\",\r\n  messagingSenderId: \"314285805616\",\r\n  appId: \"1:314285805616:web:fbf5377129894c35549df5\"\r\n};\r\n// Initialize Firebase\r\n// Initializes the Firebase SDK with the configuration settings specified in the firebaseConfig object. It tells Firebase how to connect to your Firebase project, including which project to use and the associated authentication credentials.\r\nfirebase.initializeApp(firebaseConfig);\r\n// exports the Firebase Authentication service. Firebase Authentication allows you to manage user authentication and provides features like sign-up, sign-in, password reset, and user management. By exporting 'auth', you can use it to handle user authentication within your application.\r\nexport const auth = firebase.auth();\r\n// exports the entire Firebase SDK instance. It means you can use db to access various Firebase services, including the Realtime Database, Cloud Firestore, and more. It provides a convenient way to access Firebase services without having to import them individually.\r\nexport const db = firebase;\r\n// exports the Firebase Cloud Storage service. Firebase Cloud Storage is used to store and retrieve files and media assets in the cloud. By exporting storage, you can interact with Firebase Cloud Storage to upload, download, and manage files within your app.\r\nexport const storage = firebase.storage();\r\n// initializes a reference to the Firebase Realtime Database. The 'firebase.database().ref()' method returns a reference to the root of the database. This reference is stored in the firepadRef variable and can be used to interact with the database.\r\nvar firepadRef = firebase.database().ref();\r\n\r\nlet username = \" \";\r\n\r\n// Prompt dialog that asks the user for their name using prompt(). If the user provides an empty name (including whitespace characters) or clicks Cancel, the function will call itself recursively until a valid name is provided.\r\nfunction requiredPrompt() {\r\n        username = prompt(\"What's your name?\");\r\n        if(username==null||username.replace(/\\s/g,\"\") === \"\"){\r\n          requiredPrompt();\r\n        }\r\n    }\r\nrequiredPrompt();\r\n\r\n// removes any whitespace characters from the 'username' string. It uses a regular expression (regex) to find and replace all whitespace characters globally (the g flag) with an empty string.\r\nusername=username.replace(/\\s/g,\"\");\r\n\r\n//  'username' variable as a constant named 'userName'. It makes the userName value available for use in other parts of your application by importing it.\r\nexport const userName = username;\r\n// creates a new 'URLSearchParams' object based on the current URL's query parameters. It allows you to easily access and manipulate the query parameters in the URL.\r\nconst urlparams = new URLSearchParams(window.location.search);\r\n// extracts the value of the \"id\" query parameter from the URL and stores it in the roomId variable, which can be useful for identifying specific rooms or resources.\r\nconst roomId = urlparams.get(\"id\");\r\n\r\nif (roomId) {\r\n  // if roomId already exists then to move our reference pointer (firepadRef) to a specific location in the database identified by roomId.\r\n  firepadRef = firepadRef.child(roomId);\r\n} else {\r\n  // If roomId is falsy (likely indicating that the user is creating a new room), this line generates a new unique child reference using Firebase's push() method. This creates a new node in the database with a unique key, effectively creating a new room or document.\r\n  firepadRef = firepadRef.push();\r\n  // 'window.history.replaceState(null, \"Meet\", \"?id=\" + firepadRef.key);': This line updates the browser's URL using the HTML5 History API. It replaces the current URL state with a new URL that includes the id parameter, set to the key of the newly generated child reference. This step ensures that users can share the URL with others, allowing them to access the same collaborative document or room.\r\n  window.history.replaceState(null, \"Meet\", \"?id=\" + firepadRef.key);\r\n}\r\n//  exports the 'firepadRef' variable, which now points to either an existing room's Firebase reference or a newly created one.\r\nexport default firepadRef;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ******** Firebase configuration settings ********* //\r\n/*\r\n\r\ndatabaseURL: This property specifies the URL of the Firebase Realtime Database that your application will use. In this case, it's set to \"https://myntra-meet-default-rtdb.firebaseio.com/\". The Realtime Database is a NoSQL, cloud-hosted database that allows you to store and sync data in real-time across clients.\r\n\r\napiKey: This property stores an API key that is used for authenticating requests to Firebase services from your web application. It's important to keep this API key secure, as it grants access to your Firebase project.\r\n\r\nauthDomain: This property specifies the domain associated with Firebase Authentication. It's used for configuring user authentication and sign-in.\r\n\r\nprojectId: The Firebase project ID uniquely identifies your Firebase project. This ID is associated with various Firebase services, such as the Realtime Database and Cloud Storage.\r\n\r\nstorageBucket: If you use Firebase Cloud Storage to store and serve user-generated content, this property specifies the storage bucket associated with your project.\r\n\r\nmessagingSenderId: This property is used for Firebase Cloud Messaging (FCM) and push notifications. It identifies the sender of messages to devices.\r\n\r\nappId: The Firebase project's unique application ID. This identifier is associated with your specific application within the Firebase project.\r\n\r\n*/","import MainScreen from \"./components/MainScreen/MainScreen.component\";\r\nimport firepadRef, { db, userName } from \"./server/firebase\";\r\nimport \"./App.css\";\r\nimport React,{ useEffect } from \"react\";\r\nimport {\r\n  setMainStream,\r\n  addParticipant,\r\n  setUser,\r\n  removeParticipant,\r\n  updateParticipant,\r\n} from \"./store/actioncreator\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// App component initializes media streams, connects to Firebase, and manages participants' preferences and actions based on changes in user and stream availability. It also renders the main content of the application, the MainScreen component.\r\n// 'props' as parameter, which will be used to access properties and dispatch actions.\r\nfunction App(props) {\r\n  // asynchronous function called getUserStream. It uses the navigator.mediaDevices.getUserMedia method to request access to the user's microphone and camera. It returns a localStream representing the user's audio and video stream.\r\n  const getUserStream = async () => {\r\n    const localStream = await navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n      video: true,\r\n    });\r\n\r\n    return localStream;\r\n  };\r\n  // 'useEffect' hook that runs when the component mounts. \r\n  useEffect(async () => {\r\n    // calls the getUserStream function to get the user's media stream and stores it in the stream variable.\r\n    const stream = await getUserStream();\r\n    // Disabling the user's video track initially by accessing the first video track in the stream and setting its enabled property to false.\r\n    stream.getVideoTracks()[0].enabled = false;\r\n    // props.setMainStream(stream);: Dispatches the setMainStream action with the stream as the payload to set the main stream in the Redux store.\r\n    props.setMainStream(stream);\r\n\r\n    //  It listens to changes in the Firebase '.info/connected' node to detect if the user is connected to the Firebase Realtime Database\r\n    connectedRef.on(\"value\", (snap) => {\r\n      if (snap.val()) {\r\n        //If the user is connected:\r\n        //It defines a defaultPreference object for user preferences (audio on, video off, screen sharing off).\r\n        const defaultPreference = {\r\n          audio: true,\r\n          video: false,\r\n          screen: false,\r\n        };\r\n        // It pushes user information to the participantRef in Firebase, including their name and default preferences.\r\n        const userStatusRef = participantRef.push({\r\n          userName,\r\n          preferences: defaultPreference,\r\n        });\r\n        props.setUser({\r\n          [userStatusRef.key]: { name: userName, ...defaultPreference },\r\n        });\r\n        // It sets an \"onDisconnect\" callback to remove the user's data from Firebase when they disconnect.\r\n        userStatusRef.onDisconnect().remove();\r\n      }\r\n    });\r\n  }, []);\r\n  // const connectedRef = db.database().ref(\".info/connected\");: Creates a reference to the Firebase Realtime Database node .info/connected, which is used to check the user's connection status.\r\n  const connectedRef = db.database().ref(\".info/connected\");\r\n  // const participantRef = firepadRef.child(\"participants\");: Creates a reference to the Firebase database node where participant data is stored.\r\n  const participantRef = firepadRef.child(\"participants\");\r\n\r\n  // if the 'user' property exists in the component's props and assigns true or false accordingly.\r\n  const isUserSet = !!props.user;\r\n  // if the stream property exists in the component's props and assigns true or false accordingly.\r\n  const isStreamSet = !!props.stream;\r\n\r\n  // useEffect hook that runs when either 'isStreamSet' or 'isUserSet' changes. \r\n  useEffect(() => {\r\n    if (isStreamSet && isUserSet) {\r\n      // participantRef.on(\"child_added\", (snap) => { ... }): This event listener triggers when a new participant is added to the \"participants\" node in Firebase. It captures the participant's data snapshot as snap.\r\n      participantRef.on(\"child_added\", (snap) => {\r\n        // It creates a reference 'preferenceUpdateEvent' to the \"preferences\" node for the current participant.\r\n        const preferenceUpdateEvent = participantRef\r\n          .child(snap.key)\r\n          .child(\"preferences\");\r\n        // Listens for the \"child_changed\" event on the \"preferences\" node. When a preference changes, it dispatches the \"updateParticipant\" action with the updated preference.\r\n        preferenceUpdateEvent.on(\"child_changed\", (preferenceSnap) => {\r\n          props.updateParticipant({\r\n            [snap.key]: {\r\n              [preferenceSnap.key]: preferenceSnap.val(),\r\n            },\r\n          });\r\n        });\r\n        // Extracting the participant's name and preferences from the data snapshot and assigns them to name and preferences.\r\n        const { userName: name, preferences = {} } = snap.val();\r\n        // dispatches the \"addParticipant\" action with an object containing the participant's ID as the key and their name and preferences as the value.\r\n        props.addParticipant({\r\n          [snap.key]: {\r\n            name,\r\n            ...preferences,\r\n          },\r\n        });\r\n      });\r\n      // the \"child_removed\" event listener dispatches the \"removeParticipant\" action with the removed participant's ID.\r\n      participantRef.on(\"child_removed\", (snap) => {\r\n        props.removeParticipant(snap.key);\r\n      });\r\n    }\r\n  }, [isStreamSet, isUserSet]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <MainScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Maps the state from the Redux store to the props of the connected component (App). It takes the state as its parameter, which represents the current state of the Redux store.\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // Maps the 'mainStream' property from the Redux store's state to the stream prop of the App component. This allows the App component to access the user's video stream from the Redux store.\r\n    stream: state.mainStream,\r\n    // Maps the 'currentUser' property from the Redux store's state to the user prop of the App component. This provides the App component with information about the current user.\r\n    user: state.currentUser,\r\n  };\r\n};\r\n\r\n// Maps action creators to props, allowing the connected component to dispatch Redux actions. It takes dispatch as its parameter, which is a function used to dispatch actions to the Redux store.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // Maps the 'setMainStream' action creator to the 'setMainStream' prop. This action is used to set the main video stream in the Redux store.\r\n    setMainStream: (stream) => dispatch(setMainStream(stream)),\r\n    //  Maps the 'addParticipant' action creator to the 'addParticipant' prop. This action is used to add a new participant to the Redux store.\r\n    addParticipant: (user) => dispatch(addParticipant(user)),\r\n    // Maps the 'setUser' action creator to the 'setUser' prop. This action is used to set user information in the Redux store.\r\n    setUser: (user) => dispatch(setUser(user)),\r\n    // Maps the 'removeParticipant' action creator to the 'removeParticipant' prop. This action is used to remove a participant from the Redux store.\r\n    removeParticipant: (userId) => dispatch(removeParticipant(userId)),\r\n    // Maps the 'updateParticipant' action creator to the 'updateParticipant' prop. This action is used to update participant information in the Redux store.\r\n    updateParticipant: (user) => dispatch(updateParticipant(user)),\r\n  };\r\n};\r\n\r\n// Connect is a higher-order function provided by the react-redux library. It takes two function calls as arguments: mapStateToProps and mapDispatchToProps. The first function, mapStateToProps, specifies how to map the state from the Redux store to the component's props. The second function, mapDispatchToProps, specifies how to map action creators to the component's props.When you call connect(mapStateToProps, mapDispatchToProps)(App), it returns a new component that is connected to the Redux store. This connected component receives the specified props and can dispatch actions.\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n// The 'App' component to the Redux store, allowing it to access data from the store (via mapStateToProps) and dispatch actions (via mapDispatchToProps). This connection is established using the connect function from react-redux, making it easier to manage and update application state in response to user interactions and data changes.\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import firepadRef from \"./firebase\";\r\nimport { store } from \"../index\";\r\n\r\n// 'const participantRef = firepadRef.child(\"participants\");': Here, a new constant participantRef is created by navigating to a specific location in the Firebase Realtime Database using 'firepadRef'. It goes to the \"participants\" node, which is a child node of the location pointed to by 'firepadRef'. 'participantRef' is now a reference to the \"participants\" node in the database.\r\nconst participantRef = firepadRef.child(\"participants\");\r\n\r\nexport const updatePreference = (userId, preference) => {\r\n  // creates a new reference 'currentParticipantRef'. It starts from the 'participantRef' and then goes to a specific participant node indicated by 'userId'. From there, it goes further to the \"preferences\" node. So, 'currentParticipantRef' points to a specific user's preferences in the database.\r\n  const currentParticipantRef = participantRef\r\n    .child(userId)\r\n    .child(\"preferences\");\r\n  // schedules an update to the user's preferences in the database. The 'setTimeout' function is used here, but it doesn't introduce any significant delay. It's often used to ensure that the update happens asynchronously and doesn't block the main thread. Once the timeout is reached (which happens almost immediately), the '.update(preference)' method is called on 'currentParticipantRef' to update the user's preferences with the provided preference data.\r\n  setTimeout(() => {\r\n    currentParticipantRef.update(preference);\r\n  });\r\n};\r\n\r\n// Responsible for creating and sending an offer for a peer-to-peer connection.\r\n\r\n// Define and export a function named 'createOffer'. It takes three parameters: 'peerConnection' (an instance of a WebRTC peer connection), 'receiverId' (the ID of the receiver), and 'createdID' ( the ID of the user creating the offer).\r\nexport const createOffer = async (peerConnection, receiverId, createdID) => {\r\n  // It gets a reference (currentParticipantRef) to a specific participant (receiver) in the Firebase Realtime Database using 'participantRef'.\r\n  const currentParticipantRef = participantRef.child(receiverId);\r\n  // seting up an event handler for the 'onicecandidate' event of the peerConnection. When an ICE candidate is generated during the connection negotiation process, this event handler is called.\r\n  peerConnection.onicecandidate = (event) => {\r\n  // event.candidate && ...: It checks if there is an ICE candidate in the event. ICE candidates are pieces of information used for establishing a connection. If an ICE candidate exists, the code proceeds.\r\n  // currentParticipantRef.child(\"offerCandidates\").push({ ... }): It pushes the ICE candidate data (converted to JSON format) along with the userId (the ID of the user creating the offer) to a location in the Firebase Realtime Database under the \"offerCandidates\" node for the receiver. This allows the receiver to collect and use the ICE candidates to establish a connection.\r\n    event.candidate &&\r\n      currentParticipantRef\r\n        .child(\"offerCandidates\")\r\n        .push({ ...event.candidate.toJSON(), userId: createdID });\r\n  };\r\n\r\n  // creating an offer description using the 'createOffer' method of the peerConnection. Offers are part of the WebRTC negotiation process and contain information about the user's media capabilities and preferences.\r\n  const offerDescription = await peerConnection.createOffer();\r\n  // setting the locally generated offer description as the local description of the peerConnection. This local description will be used during the negotiation process.\r\n  await peerConnection.setLocalDescription(offerDescription);\r\n  // An object 'offer' that contains information about the offer, including the SDP (Session Description Protocol) data and the type of the offer is created.\r\n  const offer = {\r\n    sdp: offerDescription.sdp,\r\n    type: offerDescription.type,\r\n    userId: createdID,\r\n  };\r\n  // Pushing the offer data to the Firebase Realtime Database under the \"offers\" node for the receiver. This allows the receiver to retrieve the offer and initiate the connection negotiation process.\r\n  await currentParticipantRef.child(\"offers\").push().set({ offer });\r\n};\r\n\r\n\r\n// To handle the exchange of WebRTC offers, answers, and ICE candidates between participants\r\nexport const initializeListensers = async (userId) => {\r\n\r\n  // geting a reference (currentUserRef) to the current user's data in the Firebase Realtime Database using the userId.\r\n  const currentUserRef = participantRef.child(userId);\r\n  // sets up an event listener for the \"child_added\" event on the \"offers\" node under the current user's data in the database. When a new child (offer) is added to this node, the provided callback function is executed.\r\n  currentUserRef.child(\"offers\").on(\"child_added\", async (snapshot) => {\r\n    // extracting the data from the added child (offer).\r\n    const data = snapshot.val();\r\n    // if the data contains an \"offer\" \r\n    if (data?.offer) {\r\n      // It retrieves the peerConnection object associated with the user who sent the offer from the Redux store.\r\n      const pc = store.getState().participants[data.offer.userId].peerConnection;\r\n      // 'await pc.setRemoteDescription(new RTCSessionDescription(data.offer));': It sets the remote description of the peerConnection using the offer data. This is an important step in the WebRTC connection establishment process.\r\n      await pc.setRemoteDescription(new RTCSessionDescription(data.offer));\r\n      // await createAnswer(data.offer.userId, userId);: It calls the createAnswer function to create an answer for the received offer. The data.offer.userId represents the ID of the user who sent the offer, and userId represents the current user's ID.\r\n      await createAnswer(data.offer.userId, userId);\r\n    }\r\n  });\r\n\r\n  // Listens for incoming ICE candidates from other users, identifies the intended recipient (based on the \"userId\" property), and adds the candidate to the appropriate user's WebRTC peer connection.\r\n  // seting up a Firebase Realtime Database event listener that listens for new child nodes being added to the \"offerCandidates\" node under the current user's reference (currentUserRef).\r\n  currentUserRef.child(\"offerCandidates\").on(\"child_added\", (snapshot) => {\r\n    //  It retrieves the data stored in the newly added child node using the snapshot.val() method. This data typically represents an ICE candidate\r\n    const data = snapshot.val();\r\n    //If the retrieved data contains a \"userId\" property. This property is used to identify which user the ICE candidate is intended for.\r\n    if (data.userId) {\r\n      // If the \"userId\" property is present in the data, it retrieves the peerConnection object associated with the user who sent this ICE candidate. It does this by accessing the Redux store's 'getState()' method to obtain the current state, then navigating through the \"participants\" object to find the relevant user's 'peerConnection'.\r\n      const pc = store.getState().participants[data.userId].peerConnection;\r\n      // Adding the ICE candidate (represented by the data object) to the user's peer connection (pc) using the addIceCandidate method. This step is crucial for establishing a WebRTC connection, as ICE candidates contain network information necessary for peers to find and communicate with each other.\r\n      pc.addIceCandidate(new RTCIceCandidate(data));\r\n    }\r\n  });\r\n\r\n  // Listens for incoming answers from other users, extracts the answer data, identifies the intended recipient (based on the \"userId\" property), and sets the remote description of the user's WebRTC peer connection to establish a bidirectional communication channel. \r\n  // seting up a Firebase Realtime Database event listener that listens for new child nodes being added to the \"answers\" node under the current user's reference (currentUserRef).\r\n  currentUserRef.child(\"answers\").on(\"child_added\", (snapshot) => {\r\n    // Retrieving the data stored in the newly added child node using the snapshot.val() method. This data typically represents an answer to a WebRTC offer.\r\n    const data = snapshot.val();\r\n    // It checks if the retrieved data contains an \"answer\" property. This property is used to identify that this child node contains answer data.\r\n    if (data?.answer) {\r\n    // If the \"answer\" property is present in the data, it retrieves the peerConnection object associated with the user who sent this answer. It does this by accessing the Redux store's getState() method to obtain the current state, then navigating through the \"participants\" object to find the relevant user's peerConnection. The \"userId\" property of the answer data is used to identify the user.\r\n      const pc = store.getState().participants[data.answer.userId].peerConnection;\r\n      // Creating a new RTCSessionDescription object based on the answer data received from the database. This object represents the remote description of the peer connection, which includes the session description protocol (SDP) information.\r\n      const answerDescription = new RTCSessionDescription(data.answer);\r\n      // setting the remote description of the user's peer connection (pc) to the answer description using the setRemoteDescription method. This step is crucial in the WebRTC connection setup process because it informs the peer's connection about the parameters and configuration of the remote stream.\r\n      pc.setRemoteDescription(answerDescription);\r\n    }\r\n  });\r\n\r\n  // Listens for incoming ICE candidates from other users, extracts the candidate data, identifies the intended recipient (based on the \"userId\" property), and adds the ICE candidate to the user's WebRTC peer connection. \r\n  // setting up a Firebase Realtime Database event listener that listens for new child nodes being added to the \"answerCandidates\" node under the current user's reference (currentUserRef).\r\n  currentUserRef.child(\"answerCandidates\").on(\"child_added\", (snapshot) => {\r\n    //  retrieves the data stored in the newly added child node using the snapshot.val() method. This data typically represents an ICE candidate used for establishing a WebRTC connection.\r\n    const data = snapshot.val();\r\n    // If the retrieved data contains a \"userId\" property. This property is used to identify which user the ICE candidate is intended for.\r\n    if (data.userId) {\r\n    // If the \"userId\" property is present in the data, it retrieves the peerConnection object associated with the user who is supposed to receive this ICE candidate. It does this by accessing the Redux store's getState() method to obtain the current state, then navigating through the \"participants\" object to find the relevant user's 'peerConnection'.\r\n      const pc = store.getState().participants[data.userId].peerConnection;\r\n    // Adding the ICE candidate to the user's peer connection (pc) using the 'addIceCandidate' method. ICE candidates are crucial for establishing direct communication between peers in a WebRTC connection. They contain network information necessary for the peer-to-peer connection setup.\r\n      pc.addIceCandidate(new RTCIceCandidate(data));\r\n    }\r\n  });\r\n};\r\n\r\n// 'createAnswer' is responsible for creating an answer in response to an offer from another user. It sets up ICE candidate handling, generates the answer, stores it in the Firebase Realtime Database, and prepares the local description for the WebRTC connection. This process is crucial for establishing bidirectional communication in a WebRTC application.\r\n// It takes two parameters: otherUserId (the ID of the user for whom we are creating an answer) and userId (the ID of the current user).\r\nconst createAnswer = async (otherUserId, userId) => {\r\n  // It retrieves the peerConnection object associated with the other user (the user who sent the offer) from the Redux store's state. This peerConnection is essential for creating the answer.\r\n  const pc = store.getState().participants[otherUserId].peerConnection;\r\n  // It gets a reference to the Firebase Realtime Database location specific to the other user (the user who sent the offer). This reference will be used to store answer-related information.\r\n  const participantRef1 = participantRef.child(otherUserId);\r\n  // Setting up an event listener on the peerConnection for ICE candidate events. When an ICE candidate event occurs (indicating the availability of an ICE candidate), it executes the provided callback function\r\n  pc.onicecandidate = (event) => {\r\n    // Inside the callback function, it checks if the event object contains a valid ICE candidate (event.candidate). If a valid candidate exists, it proceeds to the next step. It pushes the ICE candidate data (converted to JSON) into the \"answerCandidates\" location under the other user's reference in the Firebase Realtime Database. This allows the other user to access and use this ICE candidate for establishing the WebRTC connection.\r\n    event.candidate &&\r\n      participantRef1\r\n        .child(\"answerCandidates\")\r\n        .push({ ...event.candidate.toJSON(), userId: userId });\r\n  };\r\n\r\n  // It sets the locally generated answer description as the local description of the peerConnection. This step is necessary to prepare the answer for transmission.\r\n  const answerDescription = await pc.createAnswer();\r\n  await pc.setLocalDescription(answerDescription);\r\n  // It constructs an answer object containing the answer's type, SDP, and the userId of the current user.\r\n  const answer = {\r\n    type: answerDescription.type,\r\n    sdp: answerDescription.sdp,\r\n    userId: userId,\r\n  };\r\n\r\n  // It pushes the answer object into the \"answers\" location under the other user's reference in the Firebase Realtime Database. It pushes the answer object into the \"answers\" location under the other user's reference in the Firebase Realtime Database.\r\n  await participantRef1.child(\"answers\").push().set({ answer });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* \r\n                                              *********** Summary *********** \r\n\r\nFirebase Database Structure:\r\n\r\n- root\r\n  - conference_1\r\n    - participants\r\n      - userId_1\r\n        - preferences\r\n        - offers\r\n        - offerCandidates\r\n        - answers\r\n        - answerCandidates\r\n      - userId_2\r\n        - preferences\r\n        - offers\r\n        - offerCandidates\r\n        - answers\r\n        - answerCandidates\r\n      ...\r\n  - conference_2\r\n    - participants\r\n      - userId_3\r\n        - preferences\r\n        - offers\r\n        - offerCandidates\r\n        - answers\r\n        - answerCandidates\r\n      - userId_4\r\n        - preferences\r\n        - offers\r\n        - offerCandidates\r\n        - answers\r\n        - answerCandidates\r\n      ...\r\n  ...\r\n-> The root represents the root of the Firebase Realtime Database.\r\n-> firepadRef is a reference to a specific location in the database, and it serves as the root for all video conference-related data.\r\n-> participants is a node under firepadRef where information about conference participants is stored. Each participant is identified by their unique userId.\r\n-> For each participant (userId_x), the following sub-nodes are present:\r\n      preferences: Stores participant preferences.\r\n      offers: Stores offers sent by the participant.\r\n      offerCandidates: Stores ICE candidates related to the participant's offer.\r\n      answers: Stores answers received by the participant.\r\n      answerCandidates: Stores ICE candidates related to the participant's answer.\r\n-> These nodes are used to manage and exchange WebRTC-related data, including offers, answers, ICE candidates, and participant preferences during a video conference. Firebase Realtime Database provides a structured and real-time data synchronization mechanism for this purpose.\r\n\r\n\r\n\r\n-> Peer Connection Setup: A new RTCPeerConnection object called peerConnection is created to represent the connection between the local user and a remote user.\r\n\r\n-> ICE Candidate Handling: Event listeners for ICE candidates are set up. These ICE candidates are crucial for the negotiation of network routes between the local and remote users. When ICE candidates are generated during the connection process, event handlers are ready to manage them.\r\n\r\n-> Adding Local Stream: The local user's audio and video streams, represented by the localStream object, are added to the peerConnection. This step allows the local user's audio and video data to be transmitted to the remote user.\r\n\r\n-> Offer Creation and Sending: An offer, containing session description protocol (SDP) information, is created locally. This offer describes the local user's audio and video capabilities and preferences. The local user sets this offer as its local description.\r\n\r\n-> Signaling Mechanism: The local user sends this offer to the remote peer through a signaling mechanism. This mechanism can be a server, a messaging system, or any method for transmitting data between the two users.\r\n\r\n-> Offer Reception and Remote Description Set: On the remote side, the offer is received and processed. A remote session description is created based on the offer's SDP information. This remote description is set as the remote peer's description.\r\n\r\n-> Handling ICE Candidates from Remote Peer: Additionally, ICE candidates received from the remote peer are handled. These candidates help establish direct network connections and are added to the peerConnection.\r\n\r\n-> Remote Answer Generation and Sending: After receiving the offer, the remote peer generates an answer. This answer describes the remote user's audio and video capabilities and preferences. The remote peer sends this answer back to the local user.\r\n\r\n-> Remote Answer Processing: The local user receives the remote answer and sets it as the remote description in its peerConnection.\r\n\r\n-> Connection Established: With both local and remote descriptions set, the WebRTC connection is established, allowing real-time audio and video communication between the local and remote users.\r\n\r\n* In summary, this systematic approach ensures that both users in the call exchange session descriptions (offer and answer) and ICE candidates to establish a direct and efficient communication channel for audio and video data, enabling a seamless video call experience.\r\n\r\n\r\n\r\n\r\n*/\r\n","// Reducer manages the application's state for video conferencing, including adding and removing participants, handling user preferences, and establishing WebRTC connections for real-time communication.\r\nimport {\r\n  SET_MAIN_STREAM,\r\n  ADD_PARTICIPANT,\r\n  SET_USER,\r\n  REMOVE_PARTICIPANT,\r\n  UPDATE_USER,\r\n  UPDATE_PARTICIPANT,\r\n} from \"./actiontypes\";\r\n\r\nimport {\r\n  createOffer,\r\n  initializeListensers,\r\n  updatePreference,\r\n} from \"../server/peerConnection\";\r\n\r\n/* \r\ndefaultUserState is an object that represents the initial or default state of your application. It includes three main properties:\r\n  mainStream: This property is initially set to null, indicating that there is no main video stream defined when the application starts.\r\n  participants: This property is an empty object ({}), indicating that there are no participants in the video conference initially.\r\n  currentUser: This property is initially set to null, indicating that there is no current user defined when the application starts.\r\n*/\r\nlet defaultUserState = {\r\n  mainStream: null,\r\n  participants: {},\r\n  currentUser: null,\r\n};\r\n\r\n// 'servers' is an object that contains configuration settings for ICE (Interactive Connectivity Establishment) servers. ICE servers are used in WebRTC (Web Real-Time Communication) to establish peer-to-peer connections between users for real-time communication.\r\nconst servers = {\r\n  // iceServers: This property is an array of server configurations. In this case, it specifies a list of STUN (Session Traversal Utilities for NAT) servers provided by Google and Mozilla. STUN servers are used to discover a client's public IP address and port when it is located behind a NAT (Network Address Translation) firewall.\r\n  iceServers: [\r\n    {\r\n      urls: [\r\n        \"stun:stun.l.google.com:19302\",\r\n        \"stun:global.stun.twilio.com:3478\",\r\n        \"stun:stun1.l.google.com:19302\",\r\n        \"stun:stun2.l.google.com:19302\",\r\n        \"stun:stun.l.google.com:19302\",\r\n        \"stun:stun3.l.google.com:19302\",\r\n        \"stun:stun4.l.google.com:19302\",\r\n        \"stun:stun.services.mozilla.com\",\r\n      ],\r\n    },\r\n  ],\r\n  // iceCandidatePoolSize: This property sets the maximum number of ICE candidates that can be stored. ICE candidates are network endpoints used in the connection process.\r\n  iceCandidatePoolSize: 10,\r\n  // The iceCandidatePoolSize property helps manage the number of potential network paths (ICE candidates) between two users during the WebRTC connection setup. During the WebRTC connection setup process, ICE candidates are generated. These candidates represent different network paths that can be used for communication. However, generating and managing a large number of candidates can consume memory and resources.\r\n};\r\n\r\n// 'generateColor' generates a random color code in the format #RRGGBB, where RR, GG, and BB are two-digit hexadecimal values representing the red, green, and blue components of the color, respectively. This function is commonly used to assign random colors to elements in a UI, like avatars or user interface elements, for visual distinction.\r\nconst generateColor = () =>\r\n  \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n\r\n\r\n// 'userReducer' is Redux reducer which is responsible for managing the state related to users and video conference participants. It handles various actions dispatched by the application to update this state.\r\n// 'userReducer' function listens for specific action types and updates the user-related state accordingly. It uses the payload from actions to make these updates. This reducer handles actions related to managing participants, the current user, and the main video stream in a video conference application.\r\n// The 'userReducer' function, which takes two parameters: state (the current state, initialized with defaultUserState) and action (the action object dispatched to update the state).\r\nexport const userReducer = (state = defaultUserState, action) => {\r\n  //  If the action.type is equal to SET_MAIN_STREAM. It is the action type used to set the main video stream in the application.\r\n  if (action.type === SET_MAIN_STREAM) {\r\n  // extracting the 'payload' object from the action. The payload typically contains data to be used when updating the state.\r\n    let payload = action.payload;\r\n  // creating a new state object by spreading the properties of the current state (...state) and then spreading the properties of the payload object (...payload). This is a way to merge the changes from the payload into the current state.\r\n    state = { ...state, ...payload };\r\n  // returning the updated state after setting the main video stream.\r\n    return state;\r\n  } \r\n  //  when the action type is ADD_PARTICIPANT. It's responsible for adding a new participant to the video conference.\r\n  else if (action.type === ADD_PARTICIPANT) {\r\n    // The payload object from the action is extracted and assigned to the payload variable. This payload typically contains data related to the new participant being added.\r\n    let payload = action.payload;\r\n    //  Extracting the current user's ID from the state.currentUser object. This ID is used to identify the user who is currently using the application.\r\n    const currentUserId = Object.keys(state.currentUser)[0];\r\n    // extracts the new participant's ID from the payload.newUser object. It identifies the new participant being added\r\n    const newUserId = Object.keys(payload.newUser)[0];\r\n\r\n    // state.mainStream: It checks if there is a main video stream available in the state. If there is no main stream, it means that the video conference hasn't started yet, so there's no need to establish a connection. \r\n    // currentUserId !== newUserId: It checks if the new participant being added is not the same as the current user. If they are the same, there's no need to establish a connection because the user is already in the conference.\r\n    if (state.mainStream && currentUserId !== newUserId) {\r\n      // If both conditions in the if statement are met, it calls the addConnection function to establish a connection between the new participant and the main video stream. This connection setup is necessary for video conferencing.\r\n      payload.newUser = addConnection(\r\n        payload.newUser,\r\n        state.currentUser,\r\n        state.mainStream\r\n      );\r\n    }\r\n\r\n    // This conditional statement checks if the new participant being added is the same as the current user. If they are the same, it means the current user is joining the video conference, so the code does the following:\r\n    // payload.newUser[newUserId].currentUser = true;: It sets the currentUser property of the new user in the payload to true, indicating that this user is the current user.\r\n    if (currentUserId === newUserId)\r\n      payload.newUser[newUserId].currentUser = true;\r\n    // Assigning an avatar color to the new user. Each user in the video conference is assigned a unique avatar color. The generateColor function is used to generate a random color, which is then assigned to the new user.\r\n    payload.newUser[newUserId].avatarColor = generateColor();\r\n    //  A new object named participants is created by combining the existing state.participants with the new user data from the payload. This ensures that the new user is included in the list of participants.\r\n    let participants = { ...state.participants, ...payload.newUser };\r\n    //  The state is updated by spreading the existing state properties and including the updated participants object.\r\n    state = { ...state, participants };\r\n    return state;\r\n  } \r\n  // Handles the process of setting the current user in the application's state. It extracts user information from the payload, assigns an avatar color, initializes listeners, and updates the state accordingly.\r\n  else if (action.type === SET_USER) {\r\n    // A reference to the action's payload is stored in a variable named payload\r\n    let payload = action.payload;\r\n    // A copy of the existing state.participants object is made and stored in a variable named participants. This ensures that we are working with a copy of the current participants.\r\n    let participants = { ...state.participants };\r\n    // Extracting the user ID from the payload's currentUser object.\r\n    const userId = Object.keys(payload.currentUser)[0];\r\n    // Assigning an avatar color to the current user using the generateColor function. This color is unique to each user.\r\n    payload.currentUser[userId].avatarColor = generateColor();\r\n    // The purpose of the initializeListensers function is to set up event listeners related to WebRTC (Web Real-Time Communication) communication for a specific user identified by their userId.\r\n    /* \r\n      Inside the initializeListensers function, there are event listeners set up for various types of events related to WebRTC communication. These events include:\r\n        Listening for incoming offers from other users.\r\n        Listening for incoming offer candidates.\r\n        Listening for incoming answers from other users.\r\n        Listening for incoming answer candidates.\r\n      These event listeners are crucial for establishing and maintaining real-time audio and video communication between users in a video conferencing application.\r\n      When these events occur (e.g., when an offer is received from another user), the event handlers associated with these listeners will execute specific actions.\r\n      For example, when an offer is received, the code may create an answer and set up a peer connection to establish a video call.\r\n      The initializeListensers function plays a key role in managing the WebRTC communication flow for a user. It ensures that the user can receive and respond to offers, candidates, answers, and other signaling messages required for real-time communication.\r\n    */\r\n    initializeListensers(userId);\r\n    // The state is updated to include the current user and their avatar color.\r\n    // currentUser: { ...payload.currentUser }: This sets the currentUser property in the state to the data provided in the payload, including the newly assigned avatar color.\r\n    // participants: The participants object is updated with the new current user data.\r\n    state = { ...state, currentUser: { ...payload.currentUser }, participants };\r\n    return state;\r\n  } \r\n  //  Handles the removal of a participant from the application's state when a REMOVE_PARTICIPANT action is dispatched. It ensures that the state remains immutable, and the desired participant is removed from the participants object.\r\n  else if (action.type === REMOVE_PARTICIPANT) {\r\n    // Extracting the payload object from the action. The payload typically contains data or information necessary for the action. In this case, it may contain the id of the participant to be removed.\r\n    let payload = action.payload;\r\n    //  Createing a shallow copy of the participants object from the current state. This copy ensures that the original state remains unchanged while modifications are made.\r\n    let participants = { ...state.participants };\r\n    //  Removing a participant from the participants object using the id provided in the payload. It essentially deletes the participant's data from the state.\r\n    delete participants[payload.id];\r\n    // Here, a new state object is created by spreading the existing state (...state) and updating the participants property with the modified participants object. This follows the immutability principle in Redux, where state updates should produce a new state object.\r\n    state = { ...state, participants };\r\n    //  The updated state is returned from the reducer. Redux stores this updated state for further use.\r\n    return state;\r\n  } \r\n  // Handles the updating of the current user's data within the application's state when an UPDATE_USER action is dispatched. It ensures that the state remains immutable, and the user's data is updated as specified in the payload.\r\n  else if (action.type === UPDATE_USER) {\r\n    // Extracting the payload object from the action. The payload typically contains data or information necessary for the action. In this case, it may contain updates to the current user's data.\r\n    let payload = action.payload;\r\n    // Extracting the ID of the current user from the currentUser object in the state. In Redux, the current user's data is often stored under the currentUser property.\r\n    const userId = Object.keys(state.currentUser)[0];\r\n    // updatePreference(userId, payload.currentUser);: Invokes the updatePreference function, passing the userId and the currentUser object from the payload as arguments. It's responsible for updating the user's preferences, possibly related to audio, video, or other settings.\r\n    updatePreference(userId, payload.currentUser);\r\n    // state.currentUser[userId] = { ...state.currentUser[userId], ...payload.currentUser };: It updates the current user's data within the state. This update involves spreading the existing user data (...state.currentUser[userId]) and merging it with the data from the payload (...payload.currentUser). This ensures that the user's data is updated without mutating the state directly.\r\n    state.currentUser[userId] = {\r\n      ...state.currentUser[userId],\r\n      ...payload.currentUser,\r\n    };\r\n    // state = { ...state, currentUser: { ...state.currentUser } };: Creates a new state object that spreads the existing state (...state) and ensures that the currentUser property is also copied. This step follows the immutability principle in Redux, where state updates should produce a new state object.\r\n    state = {\r\n      ...state,\r\n      currentUser: { ...state.currentUser },\r\n    };\r\n    // The updated state is returned from the reducer. Redux stores this updated state for further use.\r\n    return state;\r\n  } \r\n  // Handles the updating of participant data within the application's state when an UPDATE_PARTICIPANT action is dispatched. It ensures that the state remains immutable, and the participant's data is updated as specified in the payload.\r\n  else if (action.type === UPDATE_PARTICIPANT) {\r\n    // Extracting the payload object from the action. The payload typically contains data or information necessary for the action. In this case, it may contain updates to a participant's data\r\n    let payload = action.payload;\r\n    // Extracting the ID of the new participant from the newUser object in the payload. This ID is used to identify the participant being updated.\r\n    const newUserId = Object.keys(payload.newUser)[0];\r\n    // Updating the data of the participant with the ID newUserId. It spreads the existing participant data (...state.participants[newUserId]) and merges it with the data from the payload (...payload.newUser[newUserId]). This ensures that the participant's data is updated without mutating the state directly.\r\n    payload.newUser[newUserId] = {\r\n      ...state.participants[newUserId],\r\n      ...payload.newUser[newUserId],\r\n    };\r\n    // Creating a new participants object that spreads the existing participants (...state.participants) and merges it with the data from the payload (...payload.newUser). This step combines the updated participant data with the existing participants in the state.\r\n    let participants = { ...state.participants, ...payload.newUser };\r\n    // Creating a new state object that spreads the existing state (...state) and updates the participants property with the newly combined participants object. This step follows the immutability principle in Redux, where state updates should produce a new state object.\r\n    state = { ...state, participants };\r\n    //  The updated state is returned from the reducer. Redux stores this updated state for further use.\r\n    return state;\r\n  }\r\n  // If none of the conditions match (else block), the original state is returned.\r\n  return state;\r\n};\r\n\r\n// Responsible for setting up a new WebRTC peer connection for a participant (the new user) and adding their audio and video tracks to it. It also determines the roles of offerer and answerer based on user IDs and, if needed, initiates the offer creation process. The updated participant data is returned as an object.\r\nconst addConnection = (newUser, currentUser, stream) => {\r\n  // Creating a new WebRTC peer connection (RTCPeerConnection) using the configuration defined in the servers object. This connection is used for real-time communication with other participants in the video conference.\r\n  const peerConnection = new RTCPeerConnection(servers);\r\n  // Iterating through all tracks in the stream object (which typically represents the user's audio and video streams) and adds each track to the peerConnection. This step establishes the media streams for communication.\r\n  stream.getTracks().forEach((track) => {\r\n    peerConnection.addTrack(track, stream);\r\n  });\r\n\r\n  // Extracting the user IDs of the new user and the current user. They also sort the IDs to determine the order of creating offers and answers. The user with the lower ID becomes the offerer, and the other becomes the answerer.\r\n  const newUserId = Object.keys(newUser)[0];\r\n  const currentUserId = Object.keys(currentUser)[0];\r\n\r\n  const offerIds = [newUserId, currentUserId].sort((a, b) =>\r\n    a.localeCompare(b)\r\n  );\r\n\r\n  // Setting the peerConnection property for the new user within the newUser object. This property holds the reference to the WebRTC peer connection created for the new user.\r\n  newUser[newUserId].peerConnection = peerConnection;\r\n  // If the new user is the offerer (determined by the order of their user IDs), this block calls the createOffer function to create and send an offer to the other participant (the answerer). This offer is a critical step in the WebRTC handshake process.\r\n  if (offerIds[0] !== currentUserId)\r\n    createOffer(peerConnection, offerIds[0], offerIds[1]);\r\n  // returning the updated newUser object, which now includes the peerConnection property and may have initiated the offer creation process.\r\n  return newUser;\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport { userReducer } from \"./store/reducer\";\r\n\r\n// Create a Redux Store: The code creates a Redux store using the createStore function from Redux. It passes the userReducer to the store, which will handle state updates based on various actions.\r\nexport const store = createStore(userReducer);\r\n/*\r\nReactDOM.render(): This function is used to render the React application into the HTML DOM. It takes the following parameters:\r\n\r\n-> <React.StrictMode>: This is a wrapper component used for highlighting potential problems in the application during development. It doesn't affect the production build.\r\n-> <Provider store={store}>: This is a higher-order component provided by React Redux. It wraps the entire application and provides access to the Redux store to all components within the application. The store prop is set to the Redux store we created earlier.\r\n-> <App />: This is the main component of the application, and it represents the root of the React component tree.\r\n-> document.getElementById(\"root\"): This specifies the DOM element where the React application should be rendered. In this case, it looks for an element with the ID \"root\" in the HTML file.\r\n*/\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n// reportWebVitals(): This is a function that reports various web vitals metrics for performance monitoring. It's provided by Create React App and helps developers identify performance issues.\r\nreportWebVitals();\r\n"],"sourceRoot":""}